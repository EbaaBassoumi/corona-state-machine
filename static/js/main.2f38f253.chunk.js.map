{"version":3,"sources":["machine/coronavirusMachine.js","App.js","reportWebVitals.js","index.js"],"names":["invokeFetchCasesPerOneMillion","country","a","undefined","fetch","then","response","json","Promise","reject","coronavirusMachine","Machine","id","initial","context","listCountries","activePerOneMillion","lastUpdated","cases","active","deaths","recovered","states","idle","invoke","src","onDone","actions","assign","_","event","data","countries","onError","target","on","SELECT","loading","Date","now","done","error","type","printEvent","console","log","services","getListCountries","fetchCasesPerOneMillion","inspect","iframe","App","useMachine","devTools","current","send","className","onChange","e","value","disabled","map","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f38f253.chunk.js","sourcesContent":["import {assign, Machine} from \"xstate\";\n\nconst urlCountries = \"https://covid19.mathdro.id/api/countries\";\nconst urlCasesPerCountry = \"https://corona.lmao.ninja/v2/countries\"\n\n\nconst invokeFetchCasesPerOneMillion = async country => {\n    if (country !== undefined) {\n        return await fetch(`${urlCasesPerCountry}/${country}`).then(response => response.json());\n    }\n    return Promise.reject('undefined country')\n};\n\nexport const coronavirusMachine =\n    Machine(\n        {\n            id: \"coronavirus-travel\",\n            initial: \"idle\",\n            context: {\n                listCountries: [],\n                activePerOneMillion: null,\n                lastUpdated: null,\n                cases: null,\n                active: null,\n                deaths: null,\n                recovered: null\n            },\n            states: {\n                idle: {\n                    invoke: {\n                        id: \"fetch-countries\",\n                        src: \"getListCountries\",\n                        onDone: {\n                            actions: assign({\n                                listCountries: (_, event) => event.data.countries\n                            })\n                        },\n                        onError: {\n                            target: \"error\"\n                        }\n                    },\n                    on: {\n                        SELECT: {\n                            target: \"loading\",\n                            actions: assign({\n                                country: (_,event) => event.country\n                            })\n                        }\n                    }\n                },\n                loading: {\n                    invoke: {\n                        id: \"fetch-cases-per-one-million\",\n                        src: \"fetchCasesPerOneMillion\",\n                        onDone: {\n                            target: \"done\",\n                            actions:  assign({\n                                activePerOneMillion: (context, event) => event.data.activePerOneMillion,\n                                lastUpdated: () => Date.now(),\n                                cases:  (context, event) => event.data.cases,\n                                active:  (context, event) => event.data.active,\n                                deaths:  (context, event) => event.data.deaths,\n                                recovered:  (context, event) => event.data.recovered\n                            })\n                        },\n                        onError: {\n                            target: \"error\"\n                        }\n                    }\n                },\n                done: {\n                   on :{\n                       SELECT: {\n                           target: \"loading\",\n                           actions: assign({\n                               country: (_,event) => event.country\n                           })\n                       }\n                   }\n                },\n                error: {\n                    type: \"final\"\n                }\n            }\n        },\n        {\n            actions: {\n                printEvent: (context, event) => {\n                    console.log(\"event ---\" , event)\n                    console.log(\"context ---\" , context)\n                }\n            },\n            services: {\n                getListCountries: (context, event) =>\n                    fetch(urlCountries).then(response => response.json()),\n\n                fetchCasesPerOneMillion: async (context, event) =>\n                    await invokeFetchCasesPerOneMillion(context.country)\n            }\n        }\n    );\n","import {inspect} from '@xstate/inspect';\nimport React, {createContext} from \"react\";\nimport {useMachine} from \"@xstate/react\";\nimport \"./styles.scss\";\nimport {coronavirusMachine} from \"./machine/coronavirusMachine\";\n\nexport const MachineProvider = createContext();\n\ninspect({\n    // options\n    // url: 'https://statecharts.io/inspect', // (default)\n    iframe: false // open in new window\n});\n\nfunction App() {\n    const [current, send] = useMachine(coronavirusMachine, {devTools: true});\n\n    return (\n        <div className={'app'}>\n            <main>\n                <h1>Where do you want to travel ?</h1>\n                <select\n                    onChange={e => {\n                        send(\"SELECT\", {country: e.target.value})\n                    }}>\n                    <option disabled>Select one</option>\n                    {current.context.listCountries.map(country => {\n                        return <option key={country.name}>{country.name}</option>;\n                    })}\n                </select>\n                <div>\n                    <p className={\"cases\"}>Cases: {current.context.cases || 0}</p>\n                    <p className={\"cases\"}>Active: {current.context.active || 0}</p>\n                    <p className={\"death\"}>Deaths: {current.context.deaths || 0}</p>\n                    <p className={\"recovered\"}>Recovered: {current.context.recovered || 0}</p>\n                    <p>ActivePerOneMillion: {current.context.activePerOneMillion || 0}</p>\n                    <p>LastUpdate: {current.context.lastUpdated || 0}</p>\n                    <p className={\"restrictions\"}>{current.context.activePerOneMillion > 500 ? \"Quarantine For 14 days, Negative PCR\" : \"No Travel Restrictions Found\"}</p>\n                </div>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}